cells:

- markdown: |
    # Aggregations


- markdown: |
    Import the LArray library:


- code: |
    from larray import *


- markdown: |
    Load the `population` array and related axes from the `demography_eurostat` dataset:


- code: |
    # load the 'demography_eurostat' dataset
    demography_eurostat = load_example_data('demography_eurostat')
    
    # extract the 'country', 'gender' and 'time' axes
    country = demography_eurostat.country
    gender = demography_eurostat.gender
    time = demography_eurostat.time
    
    # extract the 'population_5_countries' array as 'population'
    population = demography_eurostat.population_5_countries
    
    # show the 'population' array
    population


- markdown: |
    The LArray library provides many aggregation functions. The list is given in the [Aggregation Functions](../api.rst#aggregation-functions) subsection of the [API Reference](../api.rst) page.
    
    Aggregation operations can be performed on axes or groups. Axes and groups can be mixed. 
    
    The main rules are: 
    
    -  Axes are separated by commas ``,``
    -  Groups belonging to the same axis are grouped inside parentheses ()


- markdown: |
    Calculate the sum along an axis:


- code: |
    population.sum(gender)


- markdown: |
    or several axes (axes are separated by commas ``,``):


- code: |
    population.sum(country, gender)


- markdown: |
    Calculate the sum along all axes except one by appending `_by` to the aggregation function:


- code: |
    population.sum_by(time)


- markdown: |
    Calculate the sum along groups (the groups belonging to the same axis must grouped inside parentheses ()):


- code: |
    benelux = population.country['Belgium', 'Netherlands', 'Luxembourg'] >> 'benelux'
    fr_de = population.country['France', 'Germany'] >> 'FR+DE'
    
    population.sum((benelux, fr_de))


- markdown: |
    Mixing axes and groups in aggregations:


- code: |
    population.sum(gender, (benelux, fr_de))


# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.7.3
nbformat: 4
nbformat_minor: 2

