cells:

- markdown: |
    # Arithmetic Operations And Aggregations


- code: |
    # run this cell to avoid annoying warnings
    import warnings
    warnings.filterwarnings("ignore", message=r'.*numpy.dtype size changed*')

  metadata:
    nbsphinx: hidden

- markdown: |
    Import the LArray library:


- code: |
    from larray import *


- markdown: |
    ## Arithmetic operations


- code: |
    arr = ndtest((3, 3))
    arr


- markdown: |
    One can do all usual arithmetic operations on an array, it will apply the operation to all elements individually


- code: |
    # addition
    arr + 10


- code: |
    # multiplication
    arr * 2


- code: |
    # 'true' division
    arr / 2


- code: |
    # 'floor' division
    arr // 2


- markdown: |
    <div class="alert alert-warning">
    **Warning:** Python has two different division operators: 
    
    - the 'true' division (/) always returns a float.
    - the 'floor' division (//) returns an integer result (discarding any fractional result).
    </div>


- code: |
    # % means modulo (aka remainder of division)
    arr % 5


- code: |
    # ** means raising to the power
    arr ** 3


- markdown: |
    More interestingly, binary operators as above also works between two arrays:


- code: |
    # load the 'demography_eurostat' dataset
    demo_eurostat = load_example_data('demography_eurostat')
    
    # extract the 'pop' array
    pop = demo_eurostat.pop
    pop


- code: |
    aggregation_matrix = Array([[1, 0, 0], [0, 1, 1]], axes=(Axis('country=Belgium,France+Germany'), pop.country))
    aggregation_matrix


- code: |
    # @ means matrix product
    aggregation_matrix @ pop['Male']


- markdown: |
    <div class="alert alert-info">
    **Note:** Be careful when mixing different data types.
    You can use the method [astype](../_generated/larray.Array.astype.rst#larray.Array.astype) to change the data type of an array.
    </div>


- code: |
    aggregation_matrix = Array([[1, 0, 0], [0, 0.5, 0.5]], axes=(Axis('country=Belgium,France+Germany/2'), pop.country))
    aggregation_matrix


- code: |
    aggregation_matrix @ pop['Male']


- code: |
    # force the resulting matrix to be an integer matrix
    (aggregation_matrix @ pop['Male']).astype(int)


- markdown: |
    ### Axis order does not matter much (except for output)
    
    You can do operations between arrays having different axes order.
    The axis order of the result is the same as the left array


- code: |
    # extract the 'births' array
    births = demo_eurostat.births
    
    # let's change the order of axes of the 'births' array
    births_transposed = births.transpose()
    births_transposed


- code: |
    # LArray doesn't care of axes order when performing 
    # arithmetic operations between arrays
    pop + births_transposed


- markdown: |
    ### Axes must be compatible
    
    Arithmetic operations between two arrays only works when they have compatible axes (i.e. same labels).


- code: |
    # the 'pop' and 'births' have compatible axes
    pop + births


- code: |
    # Now, let's replace the country names by the country codes
    births_codes = births.set_labels('country', ['BE', 'FR', 'DE'])
    births_codes


- code: |
    # arithmetic operations between arrays 
    # having incompatible axes raise an error
    try:
        pop + births_codes
    except Exception as e:
        print(type(e).__name__, e)


- markdown: |
    <div class="alert alert-warning">
        **Warning:** Operations between two arrays only works when they have compatible axes (i.e. same labels) but this behavior can be override via the [ignore_labels](../_generated/larray.Array.ignore_labels.rst#larray.Array.ignore_labels) method.
    In that case only the position on the axis is used and not the labels.
    Using this method is done at your own risk.
    </div>


- code: |
    # use the .ignore_labels() method on axis 'country'
    # to avoid the incompatible axes error (risky)
    pop + births_codes.ignore_labels('country')

  metadata:
    scrolled: true

- markdown: |
    ### Extra Or Missing Axes (Broadcasting)


- markdown: |
    The condition that axes must be compatible only applies on common axes. 
    Arithmetic operations between two arrays can be performed even if the second array has extra or missing axes compared to the first one:


- code: |
    # let's define a 'multiplicator' vector with 
    # one value defined for each gender
    multiplicator = Array([-1, 1], axes=pop.gender)
    multiplicator


- code: |
    # the multiplication below has been propagated to the 
    # 'country' and 'time' axes.
    # This behavior is called broadcasting
    pop * multiplicator


- markdown: |
    ### Boolean Operations
    
    Python comparison operators are: 
    
    | Operator  | Meaning                 |
    |-----------|-------------------------|
    |``==``     | equal                   | 
    |``!=``     | not equal               | 
    |``>``      | greater than            | 
    |``>=``     | greater than or equal   | 
    |``<``      | less than               | 
    |``<=``     | less than or equal      |
    
    Applying a comparison operator on an array returns a boolean array:


- code: |
    # test which values are greater than 10 millions
    pop > 10e6


- markdown: |
    Comparison operations can be combined using Python bitwise operators:
    
    | Operator | Meaning                              |
    |----------|------------------------------------- |
    |  &       | and                                  |
    |  \|      | or                                   |
    |  ~       | not                                  |


- code: |
    # test which values are greater than 10 millions and less than 40 millions
    (pop > 10e6) & (pop < 40e6)


- code: |
    # test which values are less than 10 millions or greater than 40 millions
    (pop < 10e6) | (pop > 40e6)


- code: |
    # test which values are not less than 10 millions
    ~(pop < 10e6)


- markdown: |
    The returned boolean array can then be used in selections and assignments:


- code: |
    pop_copy = pop.copy()
    
    # set all values greater than 40 millions to 40 millions
    pop_copy[pop_copy > 40e6] = 40e6
    pop_copy


- markdown: |
    Boolean operations can be made between arrays:


- code: |
    # test where the two arrays have the same values
    pop == pop_copy


- markdown: |
    To test if all values between are equals, use the [equals](../_generated/larray.Array.equals.rst#larray.Array.equals) method:


- code: |
    pop.equals(pop_copy)


- markdown: |
    ## Aggregates
    
    The LArray library provides many aggregation functions. The list is given in the [Aggregation Functions](../api.rst#aggregation-functions) subsection of the [API Reference](../api.rst) page.
    
    Aggregation operations can be performed on axes or groups. Axes and groups can be mixed. 
    
    The main rules are: 
    
    -  Axes are separated by commas ``,``
    -  Groups belonging to the same axis are grouped inside parentheses ()


- markdown: |
    Calculate the sum along an axis:


- code: |
    pop.sum('gender')


- markdown: |
    or several axes (axes are separated by commas ``,``):


- code: |
    pop.sum('country', 'gender')


- markdown: |
    Calculate the sum along all axes except one by appending `_by` to the aggregation function:


- code: |
    pop.sum_by('time')


- markdown: |
    Calculate the sum along groups (the groups belonging to the same axis must grouped inside parentheses ()):


- code: |
    even_years = pop.time[2014::2] >> 'even_years'
    odd_years = pop.time[2013::2] >> 'odd_years'
    
    pop.sum((odd_years, even_years))


- markdown: |
    Mixing axes and groups in aggregations:


- code: |
    pop.sum('gender', (odd_years, even_years))


# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  celltoolbar: Edit Metadata
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.7.3
  livereveal:
    autolaunch: false
    scroll: true
nbformat: 4
nbformat_minor: 2

