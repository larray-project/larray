cells:

- markdown: |
    # Indexing, Selecting and Assigning


- code: |
    # run this cell to avoid annoying warnings
    import warnings
    warnings.filterwarnings("ignore", message=r'.*numpy.dtype size changed*')

  metadata:
    nbsphinx: hidden

- markdown: |
    Import the LArray library:


- code: |
    from larray import *


- markdown: |
    Import the test array ``pop``:


- code: |
    # let's start with
    pop = load_example_data('demography_eurostat').pop
    pop


- markdown: |
    ## Selecting (Subsets)
    
    The ``Array`` class allows to select a subset either by labels or indices (positions)


- markdown: |
    ### Selecting by Labels
    
    To take a subset of an array using labels, use brackets [ ].
    
    Let's start by selecting a single element:


- code: |
    pop['Belgium', 'Female', 2017]


- markdown: |
    As long as there is no ambiguity (i.e. axes sharing one or several same label(s)), the order of indexing does not matter. 
    So you usually do not care/have to remember about axes positions during computation. It only matters for output.


- code: |
    # order of index doesn't matter
    pop['Female', 2017, 'Belgium']


- markdown: |
    Selecting a subset is done by using slices or lists of labels:


- code: |
    pop[['Belgium', 'Germany'], 2014:2016]


- markdown: |
    Slices bounds are optional:
    if not given, start is assumed to be the first label and stop is the last one.


- code: |
    # select all years starting from 2015
    pop[2015:]


- code: |
    # select all first years until 2015
    pop[:2015]


- markdown: |
    Slices can also have a step (defaults to 1), to take every Nth labels:


- code: |
    # select all even years starting from 2014
    pop[2014::2]


- markdown: |
    <div class="alert alert-warning">
    **Warning:** Selecting by labels as in above examples works well as long as there is no ambiguity.
       When two or more axes have common labels, it leads to a crash.
       The solution is then to precise to which axis belong the labels.
    </div>


- code: |
    immigration = load_example_data('demography_eurostat').immigration
    
    # the 'immigration' array has two axes (country and citizenship) which share the same labels
    immigration


- code: |
    # LArray doesn't use the position of the labels used inside the brackets 
    # to determine the corresponding axes. Instead LArray will try to guess the 
    # corresponding axis for each label whatever is its position.
    # Then, if a label is shared by two or more axes, LArray will not be able 
    # to choose between the possible axes and will raise an error.
    try:
        immigration['Belgium', 'Netherlands']
    except Exception as e:
        print(type(e).__name__, ':', e)


- code: |
    # the solution is simple. You need to precise the axes on which you make a selection
    immigration[immigration.country['Belgium'], immigration.citizenship['Netherlands']]


- markdown: |
    ### Ambiguous Cases - Specifying Axes Using The Special Variable X
    
    When selecting, assigning or using aggregate functions, an axis can be
    referred via the special variable ``X``:
    
    -  pop[X.time[2015:]]
    -  pop.sum(X.time)
    
    This gives you access to axes of the array you are manipulating. The main
    drawback of using ``X`` is that you lose the autocompletion available from
    many editors. It only works with non-anonymous axes for which names do not contain whitespaces or special characters.


- code: |
    # the previous example can also be written as
    immigration[X.country['Belgium'], X.citizenship['Netherlands']]


- markdown: |
    ### Selecting by Indices
    
    Sometimes it is more practical to use indices (positions) along the axis, instead of labels.
    You need to add the character ``i`` before the brackets: ``.i[indices]``.
    As for selection with labels, you can use a single index, a slice or a list of indices.
    Indices can be also negative (-1 represent the last element of an axis).


- markdown: |
    <div class="alert alert-info">
    **Note:** Remember that indices (positions) are always **0-based** in Python.
    So the first element is at index 0, the second is at index 1, etc.
    </div>


- code: |
    # select the last year
    pop[X.time.i[-1]]


- code: |
    # same but for the last 3 years
    pop[X.time.i[-3:]]


- code: |
    # using a list of indices
    pop[X.time.i[0, 2, 4]]


- markdown: |
    <div class="alert alert-warning">
    **Warning:** The end *indice* (position) is EXCLUSIVE while the end label is INCLUSIVE.
    </div>


- code: |
    year = 2015
    
    # with labels
    pop[X.time[:year]]


- code: |
    # with indices (i.e. using the .i[indices] syntax)
    index_year = pop.time.index(year)
    pop[X.time.i[:index_year]]


- markdown: |
    You can use ``.i[]`` selection directly on array instead of axes.
    In this context, if you want to select a subset of the first and third axes for example, you must use a full slice ``:`` for the second one.


- code: |
    # select first country and last three years
    pop.i[0, :, -3:]


- markdown: |
    ### Using Groups In Selections


- code: |
    even_years = pop.time[2014::2]
    
    pop[even_years]


- markdown: |
    ## Boolean Filtering
    
    Boolean filtering can be used to extract subsets. Filtering can be done on axes:


- code: |
    # select even years
    pop[X.time % 2 == 0]


- markdown: |
    or data:


- code: |
    # select population for the year 2017
    pop_2017 = pop[2017]
    
    # select all data with a value greater than 30 million
    pop_2017[pop_2017 > 30e6]


- markdown: |
    <div class="alert alert-info">
    **Note:** Be aware that after boolean filtering, several axes may have merged.
    </div>


- markdown: |
    Arrays can also be used to create boolean filters:


- code: |
    start_year = Array([2015, 2016, 2017], axes=pop.country)
    start_year


- code: |
    pop[X.time >= start_year]


- markdown: |
    ## Assigning subsets
    
    ### Assigning A Value
    
    Assigning a value to a subset is simple:


- code: |
    pop[2017] = 0
    pop


- markdown: |
    Now, let's store a subset in a new variable and modify it:


- code: |
    # store the data associated with the year 2016 in a new variable
    pop_2016 = pop[2016]
    pop_2016


- code: |
    # now, we modify the new variable
    pop_2016['Belgium'] = 0
    
    # and we can see that the original array has been also modified
    pop


- markdown: |
    One very important gotcha though...
    
    <div class="alert alert-warning">
    **Warning:** Storing a subset of an array in a new variable and modifying it after may also impact the original array. The reason is that selecting a contiguous subset of the data does not return a copy of the selected subset, but rather a view on a subset of the array. To avoid such behavior, use the ``.copy()`` method.
    </div>
    
    Remember:
    
    -  taking a contiguous subset of an array is extremely fast (no data is copied)
    -  if one modifies that subset, one also **modifies the original array**
    -  **.copy()** returns a copy of the subset (takes speed and memory) but
       allows you to change the subset without modifying the original array
       in the same time


- markdown: |
    The same warning apply for entire arrays:


- code: |
    # reload the 'pop' array
    pop = load_example_data('demography_eurostat').pop
    
    # create a second 'pop2' variable
    pop2 = pop
    pop2


- code: |
    # set all data corresponding to the year 2017 to 0
    pop2[2017] = 0
    pop2


- code: |
    # and now take a look of what happened to the original array 'pop'
    # after modifying the 'pop2' array
    pop


- markdown: |
    <div class="alert alert-warning">
    **Warning:** The syntax ``new_array = old_array`` does not create a new array but rather an 'alias' variable. To actually create a new array as a copy of a previous one, the ``.copy()`` method must be called.
    </div>


- code: |
    # reload the 'pop' array
    pop = load_example_data('demography_eurostat').pop
    
    # copy the 'pop' array and store the copy in a new variable
    pop2 = pop.copy()
    
    # modify the copy
    pop2[2017] = 0
    pop2


- code: |
    # the data from the original array have not been modified
    pop


- markdown: |
    ### Assigning Arrays And Broadcasting
    
    Instead of a value, we can also assign an array to a subset. In that
    case, that array can have less axes than the target but those which are
    present must be compatible with the subset being targeted.


- code: |
    # select population for the year 2015
    pop_2015 = pop[2015]
    
    # propagate population for the year 2015 to all next years
    pop[2016:] = pop_2015
    
    pop


- markdown: |
    <div class="alert alert-warning">
    **Warning:** The array being assigned must have compatible axes (i.e. same axes names and same labels) with the target subset.
    </div>


- code: |
    # replace 'Male' and 'Female' labels by 'M' and 'F'
    pop_2015 = pop_2015.set_labels('gender', 'M,F')
    pop_2015


- code: |
    # now let's try to repeat the assignement operation above with the new labels.
    # An error is raised because of incompatible axes
    try:
        pop[2016:] = pop_2015
    except Exception as e:
        print(type(e).__name__, ':', e)


# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  celltoolbar: Edit Metadata
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.7.3
  livereveal:
    autolaunch: false
    scroll: true
nbformat: 4
nbformat_minor: 2

