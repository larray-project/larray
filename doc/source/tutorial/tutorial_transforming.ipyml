cells:

- markdown: |
    # Transforming Arrays (Relabeling, Renaming, Reordering, Sorting, ...)


- markdown: |
    Import the LArray library:


- code: |
    from larray import *


- markdown: |
    Import the `population` array from the `demography_eurostat` dataset:


- code: |
    demography_eurostat = load_example_data('demography_eurostat')
    population = demography_eurostat.population
    
    # display the 'population' array
    population


- markdown: |
    ## Manipulating axes
    
    
    The ``Array`` class offers several methods to manipulate the axes and labels of an array:
    
    - [set_labels](../_generated/larray.Array.set_labels.rst#larray.Array.set_labels): to replace all or some labels of one or several axes.
    - [rename](../_generated/larray.Array.rename.rst#larray.Array.rename): to replace one or several axis names.
    - [set_axes](../_generated/larray.Array.set_axes.rst#larray.Array.set_axes): to replace one or several axes.
    - [transpose](../_generated/larray.Array.transpose.rst#larray.Array.transpose): to modify the order of axes.
    - [drop](../_generated/larray.Array.drop.rst#larray.Array.drop): to remove one or several labels.
    - [combine_axes](../_generated/larray.Array.combine_axes.rst#larray.Array.combine_axes): to combine axes.
    - [split_axes](../_generated/larray.Array.split_axes.rst#larray.Array.split_axes): to split one or several axes by splitting their labels and names.
    - [reindex](../_generated/larray.Array.reindex.rst#larray.Array.reindex): to reorder, add and remove labels of one or several axes.
    - [insert](../_generated/larray.Array.insert.rst#larray.Array.insert): to insert a label at a given position.


- markdown: |
    ### Relabeling
    
    Replace some labels of an axis:


- code: |
    # replace only one label of the 'gender' axis by passing a dict
    population_new_labels = population.set_labels('gender', {'Male': 'Men'})
    population_new_labels


- code: |
    # set all labels of the 'country' axis to uppercase by passing the function str.upper()
    population_new_labels = population.set_labels('country', str.upper)
    population_new_labels


- markdown: |
    See [set_labels](../_generated/larray.Array.set_labels.rst#larray.Array.set_labels) for more details and examples.


- markdown: |
    ### Renaming axes
    
    Rename one axis:


- code: |
    # 'rename' returns a copy of the array
    population_new_names = population.rename('time', 'year')
    population_new_names


- markdown: |
    Rename several axes at once:


- code: |
    population_new_names = population.rename({'gender': 'sex', 'time': 'year'})
    population_new_names


- markdown: |
    See [rename](../_generated/larray.Array.rename.rst#larray.Array.rename) for more details and examples.


- markdown: |
    ### Replacing Axes
    
    Replace one axis:


- code: |
    new_gender = Axis('sex=Men,Women')
    population_new_axis = population.set_axes('gender', new_gender)
    population_new_axis


- markdown: |
    Replace several axes at once:


- code: |
    new_country = Axis('country_codes=BE,FR,DE') 
    population_new_axes = population.set_axes({'country': new_country, 'gender': new_gender})
    population_new_axes


- markdown: |
    ### Reordering axes
    
    Axes can be reordered using ``transpose`` method.
    By default, *transpose* reverse axes, otherwise it permutes the axes according to the list given as argument.
    Axes not mentioned come after those which are mentioned(and keep their relative order).
    Finally, *transpose* returns a copy of the array.


- code: |
    # starting order : country, gender, time
    population


- code: |
    # no argument --> reverse all axes
    population_transposed = population.transpose()
    
    # .T is a shortcut for .transpose()
    population_transposed = population.T
    
    population_transposed


- code: |
    # reorder according to list
    population_transposed = population.transpose('gender', 'country', 'time')
    population_transposed


- code: |
    # move 'time' axis at first place
    # not mentioned axes come after those which are mentioned (and keep their relative order)
    population_transposed = population.transpose('time')
    population_transposed


- code: |
    # move 'gender' axis at last place
    # not mentioned axes come before those which are mentioned (and keep their relative order)
    population_transposed = population.transpose(..., 'gender')
    population_transposed


- markdown: |
    See [transpose](../_generated/larray.Array.transpose.rst#larray.Array.transpose) for more details and examples.


- markdown: |
    ### Dropping Labels


- code: |
    population_labels_dropped = population.drop([2014, 2016])
    population_labels_dropped


- markdown: |
    See [drop](../_generated/larray.Array.drop.rst#larray.Array.drop) for more details and examples.


- markdown: |
    ### Combine And Split Axes
    
    Combine two axes:


- code: |
    population_combined_axes = population.combine_axes(('country', 'gender'))
    population_combined_axes


- markdown: |
    Split an axis:


- code: |
    population_split_axes = population_combined_axes.split_axes('country_gender')
    population_split_axes


- markdown: |
    See [combine_axes](../_generated/larray.Array.combine_axes.rst#larray.Array.combine_axes) and [split_axes](../_generated/larray.Array.split_axes.rst#larray.Array.split_axes) for more details and examples.


- markdown: |
    ### Reordering, adding and removing labels
    
    The ``reindex`` method allows to reorder, add and remove labels along one axis:


- code: |
    # reverse years + remove 2013 + add 2018 + copy data for 2017 to 2018
    population_new_time = population.reindex('time', '2018..2014', fill_value=population[2017])
    population_new_time


- markdown: |
    or several axes:


- code: |
    population_new = population.reindex({'country': 'country=Luxembourg,Belgium,France,Germany', 
                           'time': 'time=2018..2014'}, fill_value=0)
    population_new


- markdown: |
    See [reindex](../_generated/larray.Array.reindex.rst#larray.Array.reindex) for more details and examples.


- markdown: |
    Another way to insert new labels is to use the ``insert`` method:


- code: |
    # insert a new country before 'France' with all values set to 0
    population_new_country = population.insert(0, before='France', label='Luxembourg')
    # or equivalently
    population_new_country = population.insert(0, after='Belgium', label='Luxembourg')
    
    population_new_country


- markdown: |
    See [insert](../_generated/larray.Array.insert.rst#larray.Array.insert) for more details and examples.


- markdown: |
    ## Sorting
    
    
    - [sort_axes](../_generated/larray.Array.sort_axes.rst#larray.Array.sort_axes): sort the labels of an axis.
    - [labelsofsorted](../_generated/larray.Array.labelsofsorted.rst#larray.Array.labelsofsorted): give labels which would sort an axis. 
    - [sort_values](../_generated/larray.Array.sort_values.rst#larray.Array.sort_values): sort axes according to values


- code: |
    # get a copy of the 'population_benelux' array
    population_benelux = demography_eurostat.population_benelux.copy()
    population_benelux


- markdown: |
    Sort an axis (alphabetically if labels are strings)


- code: |
    population_sorted = population_benelux.sort_axes('gender')
    population_sorted


- markdown: |
    Give labels which would sort the axis


- code: |
    population_benelux.labelsofsorted('country')


- markdown: |
    Sort according to values


- code: |
    population_sorted = population_benelux.sort_values(('Male', 2017))
    population_sorted


- markdown: |
    ## Aligning Arrays
    
    The ``align`` method align two arrays on their axes with a specified join method.
    In other words, it ensure all common axes are compatible.


- code: |
    # get a copy of the 'births' array
    births = demography_eurostat.births.copy()
    
    # align the two arrays with the 'inner' join method
    population_aligned, births_aligned = population_benelux.align(births, join='inner')


- code: |
    print('population_benelux before align:')
    print(population_benelux)
    print()
    print('population_benelux after align:')
    print(population_aligned)


- code: |
    print('births before align:')
    print(births)
    print()
    print('births after align:')
    print(births_aligned)


- markdown: |
    Aligned arrays can then be used in arithmetic operations:


- code: |
    population_aligned - births_aligned


- markdown: |
    See [align](../_generated/larray.Array.align.rst#larray.Array.align) for more details and examples.


# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  celltoolbar: Edit Metadata
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.7.3
  livereveal:
    autolaunch: false
    scroll: true
nbformat: 4
nbformat_minor: 2

