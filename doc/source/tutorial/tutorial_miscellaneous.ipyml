cells:

- markdown: |
    # Some Useful Functions


- code: |
    # run this cell to avoid annoying warnings
    import warnings
    warnings.filterwarnings("ignore", message=r'.*numpy.dtype size changed*')

  metadata:
    nbsphinx: hidden

- markdown: |
    Import the LArray library:


- code: |
    from larray import *


- markdown: |
    Check the version of LArray:


- code: |
    from larray import __version__
    __version__


- code: |
    # load 'demography_eurostat' dataset
    demo_eurostat = load_example_data('demography_eurostat')
    
    # extract the 'pop' array from the dataset 
    pop = demo_eurostat.pop
    pop


- markdown: |
    ### with total
    
    Add totals to one or several axes:


- code: |
    pop.with_total('gender', label='Total')


- markdown: |
    See [with_total](../_generated/larray.LArray.with_total.rst#larray.LArray.with_total) for more details and examples.


- markdown: |
    ### where
    
    The ``where`` function can be used to apply some computation depending on a condition:


- code: |
    # where(condition, value if true, value if false)
    where(pop < pop.mean('time'), -pop, pop)


- markdown: |
    See [where](../_generated/larray.where.rst#larray.where) for more details and examples.


- markdown: |
    ### clip
    
    Set all data between a certain range:


- code: |
    # values below 10 millions are set to 10 millions
    pop.clip(minval=10**7)


- code: |
    # values above 40 millions are set to 40 millions
    pop.clip(maxval=4*10**7)


- code: |
    # values below 10 millions are set to 10 millions and 
    # values above 40 millions are set to 40 millions
    pop.clip(10**7, 4*10**7)


- markdown: |
    See [clip](../_generated/larray.LArray.clip.rst#larray.LArray.clip) for more details and examples.


- markdown: |
    ### divnot0
    
    Replace division by 0 by 0:


- code: |
    divisor = ones(pop.axes, dtype=int)
    divisor['Male'] = 0
    divisor


- code: |
    pop / divisor


- code: |
    # we use astype(int) since the divnot0 method 
    # returns a float array in this case while 
    # we want an integer array
    pop.divnot0(divisor).astype(int)


- markdown: |
    See [divnot0](../_generated/larray.LArray.divnot0.rst#larray.LArray.divnot0) for more details and examples.


- markdown: |
    ### ratio
    
    The ``ratio`` (``rationot0``) method returns an array with all values divided by the sum of values along given axes:


- code: |
    pop.ratio('gender')
    
    # which is equivalent to
    pop / pop.sum('gender')


- markdown: |
    See [ratio](../_generated/larray.LArray.ratio.rst#larray.LArray.ratio) and [rationot0](../_generated/larray.LArray.rationot0.rst#larray.LArray.rationot0) for more details and examples.


- markdown: |
    ### percents


- code: |
    # or, if you want the previous ratios in percents
    pop.percent('gender')


- markdown: |
    See [percent](../_generated/larray.LArray.percent.rst#larray.LArray.percent) for more details and examples.


- markdown: |
    ### diff
    
    The ``diff`` method calculates the n-th order discrete difference along a given axis.
    
    The first order difference is given by ``out[n+1] = in[n+1] - in[n]`` along the given axis.


- code: |
    # calculates 'diff[year+1] = pop[year+1] - pop[year]'
    pop.diff('time')


- code: |
    # calculates 'diff[year+2] = pop[year+2] - pop[year]'
    pop.diff('time', d=2)


- code: |
    # calculates 'diff[year] = pop[year+1] - pop[year]'
    pop.diff('time', label='lower')


- markdown: |
    See [diff](../_generated/larray.LArray.diff.rst#larray.LArray.diff) for more details and examples.


- markdown: |
    ### growth\_rate
    
    The ``growth_rate`` method calculates the growth along a given axis.
        
    It is roughly equivalent to ``a.diff(axis, d, label) / a[axis.i[:-d]]``:


- code: |
    pop.growth_rate('time')


- markdown: |
    See [growth_rate](../_generated/larray.LArray.growth_rate.rst#larray.LArray.growth_rate) for more details and examples.


- markdown: |
    ### shift
    
    The ``shift`` method drops first label of an axis and shifts all subsequent labels


- code: |
    pop.shift('time')


- code: |
    # when shift is applied on an (increasing) time axis,
    # it effectively brings "past" data into the future
    pop_shifted = pop.shift('time')
    stack({'pop_shifted_2014': pop_shifted[2014], 'pop_2013': pop[2013]}, 'array')


- markdown: |
    See [shift](../_generated/larray.LArray.shift.rst#larray.LArray.shift) for more details and examples.


- markdown: |
    ### Other interesting functions
    
    There are a lot more interesting functions that you can find in the API reference in sections [Aggregation Functions](../api.rst#aggregation-functions), [Miscellaneous](../api.rst#miscellaneous) and [Utility Functions](../api.rst#utility-functions).


# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  celltoolbar: Edit Metadata
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.7.3
  livereveal:
    autolaunch: false
    scroll: true
nbformat: 4
nbformat_minor: 2

