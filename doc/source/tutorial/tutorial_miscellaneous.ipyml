cells:

- markdown: |
    # Miscellaneous (other interesting array functions)


- markdown: |
    Import the LArray library:


- code: |
    from larray import *

  id: 1

- markdown: |
    Import a subset of the test array ``pop``:


- code: |
    # import a 6 x 2 x 2 subset of the 'pop' example array
    pop = load_example_data('demography').pop[2016, 'BruCap', 100:105]
    pop

  id: 2

- markdown: |
    ### with total
    
    Add totals to one axis


- code: |
    pop.with_total('sex', label='B')

  id: 3

- markdown: |
    Add totals to all axes at once


- code: |
    # by default label is 'total'
    pop.with_total()

  id: 4

- markdown: |
    ### where
    
    where can be used to apply some computation depending on a condition


- code: |
    # where(condition, value if true, value if false)
    where(pop < 10, 0, -pop)

  id: 5

- markdown: |
    ### clip
    
    Set all data between a certain range


- code: |
    # clip(min, max)
    # values below 10 are set to 10 and values above 50 are set to 50
    pop.clip(10, 50)

  id: 6

- markdown: |
    ### divnot0
    
    Replace division by 0 to 0


- code: |
    pop['BE'] / pop['FO']

  id: 7

- code: |
    # divnot0 replaces results of division by 0 by 0.
    # Using it should be done with care though
    # because it can hide a real error in your data.
    pop['BE'].divnot0(pop['FO'])

  id: 8

- markdown: |
    ### diff
    
    The ``diff`` method calculates the n-th order discrete difference along a given axis.
    The first order difference is given by out[n+1] = in[n + 1] - in[n] along the given axis.


- code: |
    pop = load_example_data('demography').pop[2005:2015, 'BruCap', 50]
    pop

  id: 9

- code: |
    # calculates 'pop[year+1] - pop[year]'
    pop.diff('time')

  id: 10

- code: |
    # calculates 'pop[year+2] - pop[year]'
    pop.diff('time', d=2)

  id: 11

- markdown: |
    ### ratio


- code: |
    pop.ratio('nat')
    
    # which is equivalent to
    pop / pop.sum('nat')

  id: 12

- markdown: |
    ### percents


- code: |
    # or, if you want the previous ratios in percents
    pop.percent('nat')

  id: 13

- markdown: |
    ### growth\_rate
    
    using the same principle than `diff`


- code: |
    pop.growth_rate('time')

  id: 14

- markdown: |
    ### shift
    
    The ``shift`` method drops first label of an axis and shifts all subsequent labels


- code: |
    pop.shift('time')

  id: 15

- code: |
    # when shift is applied on an (increasing) time axis,
    # it effectively brings "past" data into the future
    pop.shift('time').drop_labels('time') == pop[2005:2014].drop_labels('time')

  id: 16

- code: |
    # this is mostly useful when you want to do operations between the past and now
    # as an example, here is an alternative implementation of the .diff method seen above:
    pop.i[1:] - pop.shift('time')

  id: 17

- markdown: |
    ### Misc other interesting functions
    
    There are a lot more interesting functions available:
    
    - round, floor, ceil, trunc,
    - exp, log, log10,
    - sqrt, absolute, nan_to_num, isnan, isinf, inverse,
    - sin, cos, tan, arcsin, arccos, arctan
    - and many many more...


# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  celltoolbar: Edit Metadata
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.6.4
  livereveal:
    autolaunch: false
    scroll: true
nbformat: 4
nbformat_minor: 2

# ---------------------------------------------------------------------------
data:
  [{execution_count: null, outputs: []}, {execution_count: null, outputs: []}, {execution_count: null,
      outputs: []}, {execution_count: null, outputs: []}, {execution_count: null, outputs: []},
    {execution_count: null, outputs: []}, {execution_count: null, outputs: []}, {execution_count: null,
      outputs: []}, {execution_count: null, outputs: []}, {execution_count: null, outputs: []},
    {execution_count: null, outputs: []}, {execution_count: null, outputs: []}, {execution_count: null,
      outputs: []}, {execution_count: null, outputs: []}, {execution_count: null, outputs: []},
    {execution_count: null, outputs: []}, {execution_count: null, outputs: []}, {execution_count: null,
      outputs: []}]
