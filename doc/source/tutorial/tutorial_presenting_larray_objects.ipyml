cells:

- markdown: |
    # Presenting LArray objects (Axis, Groups, LArray, Session)


- code: |
    # run this cell to avoid annoying warnings
    import warnings
    warnings.filterwarnings("ignore", message=r'.*numpy.dtype size changed*')

  metadata:
    nbsphinx: hidden

- markdown: |
    Import the LArray library:


- code: |
    from larray import *


- markdown: |
    Check the version of LArray:


- code: |
    from larray import __version__
    __version__


- markdown: |
    ## Axis
    
    An ``Axis`` represents a dimension of an LArray object.
    It consists of a name and a list of labels. 
    
    They are several ways to create an axis:


- code: |
    # create a wildcard axis
    age = Axis(3, 'age')
    # labels given as a list
    time = Axis([2007, 2008, 2009], 'time')
    # create an axis using one string
    sex = Axis('sex=M,F')
    # labels generated using a special syntax
    other = Axis('other=A01..C03')
    
    age, sex, time, other


- markdown: |
    See the [Axis](../api.rst#axis) section of the API Reference to explore all methods of Axis objects.


- markdown: |
    ## Groups
    
    A ``Group`` represents a selection of labels from an Axis. It can optionally have a name (using operator ``>>``). 
    Groups can be used when selecting a subset of an array and in aggregations. 
    
    Group objects are created as follow:


- code: |
    # define an Axis object 'age'
    age = Axis('age=0..100')
    
    # create an anonymous Group object 'teens'
    teens = age[10:20]
    # create a Group object 'pensioners' with a name 
    pensioners = age[67:] >> 'pensioners'
    
    teens


- markdown: |
    It is possible to set a name or to rename a group after its declaration: 


- code: |
    # method 'named' returns a new group with the given name
    teens = teens.named('teens')
    
    # operator >> is just a shortcut for the call of the method named
    teens = teens >> 'teens'
    
    teens


- markdown: |
    See the [Group](../api.rst#group) section of the API Reference to explore all methods of Group objects.


- markdown: |
    ## LArray
    
    A ``LArray`` object represents a multidimensional array with labeled axes.
    
    ### Create an array from scratch
    
    To create an array from scratch, you need to provide the data and a list
    of axes. Optionally, metadata (title, description, creation date, authors, ...) can be associated to the array:


- code: |
    import numpy as np
    
    # list of the axes
    axes = [age, sex, time, other]
    # data (the shape of data array must match axes lengths)
    data = np.random.randint(100, size=[len(axis) for axis in axes])
    # metadata
    meta = [('title', 'random array')]
    
    arr = LArray(data, axes, meta=meta)
    arr


- markdown: |
    Metadata can be added to an array at any time using: 


- code: |
    arr.meta.description = 'array containing random values between 0 and 100'
    
    arr.meta


- markdown: |
    <div class="alert alert-warning">
    
    **Warning:**  
      <ul>
        <li>Currently, only the HDF (.h5) file format supports saving and loading array metadata.</li>
        <li>Metadata is not kept when actions or methods are applied on an array
            except for operations modifying the object in-place, such as `pop[age < 10] = 0`,
            and when the method `copy()` is called. Do not add metadata to an array if you know
            you will apply actions or methods on it before dumping it.</li>
      </ul>
    
    </div>


- markdown: |
    ### Array creation functions
    
    Arrays can also be generated in an easier way through [creation functions](../api.rst#array-creation-functions):
    
    -  `ndtest` : creates a test array with increasing numbers as data
    -  `empty` : creates an array but leaves its allocated memory
       unchanged (i.e., it contains "garbage". Be careful !)
    -  `zeros`: fills an array with 0
    -  `ones` : fills an array with 1
    -  `full` : fills an array with a given value
    -  `sequence` : creates an array from an axis by iteratively applying a function to a given initial value.
    
    Except for ndtest, a list of axes must be provided.
    Axes can be passed in different ways:
    
    -  as Axis objects
    -  as integers defining the lengths of auto-generated wildcard axes
    -  as a string : 'sex=M,F;time=2007,2008,2009' (name is optional)
    -  as pairs (name, labels)
    
    Optionally, the type of data stored by the array can be specified using argument dtype.


- code: |
    # start defines the starting value of data
    ndtest(['age=0..2', 'sex=M,F', 'time=2007..2009'], start=-1)


- code: |
    # start defines the starting value of data
    # label_start defines the starting index of labels
    ndtest((3, 3), start=-1, label_start=2)


- code: |
    # empty generates uninitialised array with correct axes
    # (much faster but use with care!).
    # This not really random either, it just reuses a portion
    # of memory that is available, with whatever content is there.
    # Use it only if performance matters and make sure all data
    # will be overridden.
    empty(['age=0..2', 'sex=M,F', 'time=2007..2009'])


- code: |
    # example with anonymous axes
    zeros(['0..2', 'M,F', '2007..2009'])


- code: |
    # dtype=int forces to store int data instead of default float
    ones(['age=0..2', 'sex=M,F', 'time=2007..2009'], dtype=int)


- code: |
    full(['age=0..2', 'sex=M,F', 'time=2007..2009'], 1.23)


- markdown: |
    All the above functions exist in *(func)_like* variants which take axes from another array


- code: |
    ones_like(arr)


- markdown: |
    Create an array using the special ``sequence`` function (see link to documention of ``sequence`` in API reference for more examples):


- code: |
    # With initial=1.0 and inc=0.5, we generate the sequence 1.0, 1.5, 2.0, 2.5, 3.0, ...
    sequence('sex=M,F', initial=1.0, inc=0.5)


- markdown: |
    ### Inspecting LArray objects


- code: |
    # create a test array
    arr = ndtest([age, sex, time, other])


- markdown: |
    Get array summary : metadata + dimensions + description of axes + dtype + size in memory


- code: |
    arr.info


- markdown: |
    Get axes


- code: |
    arr.axes


- markdown: |
    Get number of dimensions


- code: |
    arr.ndim


- markdown: |
    Get length of each dimension


- code: |
    arr.shape


- markdown: |
    Get total number of elements of the array


- code: |
    arr.size


- markdown: |
    Get type of internal data (int, float, ...)


- code: |
    arr.dtype


- markdown: |
    Get size in memory


- code: |
    arr.memory_used


- markdown: |
    Display the array in the viewer (graphical user interface) in read-only mode.
    This will open a new window and block execution of the rest of code until the windows is closed! Required PyQt installed.
    
    ```python
    view(arr)
    ```


- markdown: |
    Or load it in Excel:
    
    ```python
    arr.to_excel()
    ```


- markdown: |
    ### More on LArray objects
    
    To know how to save and load arrays in CSV, Excel or HDF format, please refer to the [Loading and Dumping Arrays](tutorial_IO.ipynb#Loading-and-Dumping-Arrays) section of the tutorial.
    
    See the [LArray](../api.rst#larray) section of the API Reference to explore all methods of LArray objects.


- markdown: |
    ## Session
    
    A ``Session`` object is a dictionary-like object used to gather several arrays, axes and groups. 
    A session is particularly adapted to gather all input objects of a model or to gather the output arrays from different scenarios. Like with arrays, it is possible to associate metadata to sessions.


- markdown: |
    ### Creating Sessions
    
    To create a session, you can first create an empty session and then populate it with arrays, axes and groups:


- code: |
    # create an empty session
    s_pop = Session()
    
    # add axes to the session
    gender = Axis("gender=Male,Female")
    s_pop.gender = gender
    time = Axis("time=2013..2017")
    s_pop.time = time
    
    # add arrays to the session
    s_pop.pop = zeros((gender, time))
    s_pop.births = zeros((gender, time))
    s_pop.deaths = zeros((gender, time))
    
    # add metadata after creation
    s_pop.meta.title = 'Demographic Model of Belgium'
    s_pop.meta.description = 'Models the demography of Belgium'
    
    # print content of the session
    print(s_pop.summary())


- markdown: |
    or you can create and populate a session in one step:


- code: |
    gender = Axis("gender=Male,Female")
    time = Axis("time=2013..2017")
    
    # create and populate a new session in one step
    # Python <= 3.5
    s_pop = Session([('gender', gender), ('time', time), ('pop', zeros((gender, time))), 
                    ('births', zeros((gender, time))), ('deaths', zeros((gender, time)))], 
                    meta=[('title', 'Demographic Model of Belgium'),('description', 'Modelize the demography of Belgium')])
    # Python 3.6+
    s_pop = Session(gender=gender, time=time, pop=zeros((gender, time)), 
                    births=zeros((gender, time)), deaths=zeros((gender, time)), 
                    meta=Metadata(title='Demographic Model of Belgium', description='Modelize the demography of Belgium'))
    
    # print content of the session
    print(s_pop.summary())


- markdown: |
    <div class="alert alert-warning">
    
    **Warning:**
      <ul>
        <li>Contrary to array metadata, saving and loading session metadata is supported for
            all current session file formats: Excel, CSV and HDF (.h5).</li>
        <li>Metadata is not kept when actions or methods are applied on a session
            except for operations modifying a session in-place, such as: `s.arr1 = 0`.
            Do not add metadata to a session if you know you will apply actions or methods
            on it before dumping it.</li>
      </ul>
    
    </div>


- markdown: |
    ### More on Session objects
    
    To know how to save and load sessions in CSV, Excel or HDF format, please refer to the [Loading and Dumping Sessions](tutorial_IO.ipynb#Loading-and-Dumping-Sessions) section of the tutorial.
    
    To see how to work with sessions, please read the [Working With Sessions](tutorial_sessions.ipynb#Working-With-Sessions) section of the tutorial.
    
    Finally, see the [Session](../api.rst#session) section of the API Reference to explore all methods of Session objects.


# The lines below here may be deleted if you do not need them.
# ---------------------------------------------------------------------------
metadata:
  celltoolbar: Edit Metadata
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
  language_info:
    codemirror_mode:
      name: ipython
      version: 3
    file_extension: .py
    mimetype: text/x-python
    name: python
    nbconvert_exporter: python
    pygments_lexer: ipython3
    version: 3.7.3
  livereveal:
    autolaunch: false
    scroll: true
nbformat: 4
nbformat_minor: 2

